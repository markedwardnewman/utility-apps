'Label:    RemoteServicesManager
'Function: Manage services and read error logs on remote machines
'	- The server list is a simple text file naming the servers, delineated by commas.  IP addresses and other input types not tested
'	- Must have AD access on the remote machine
'	- When the remote machine is accessed it does NOT take up a user seat, so even if the server is "full" access will still be granted
'Language: vb.net, generated with framework 4.5, not tested on legacy frameworks
'By:       Mark Newman
'Date:     3/02/2014
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports System
...
Imports System.IO

Public Class FormRemoteServicesControl
    Dim selectedService As String
    Dim serviceNameItem As ListViewItem
    Dim logServiceNameItem As ListViewItem
    Dim logServiceOperation As String
    Dim selectedServer As String
    Dim dayAndTime As Date = DateAndTime.Now
    Dim DefaultServersFileText As String = "An autogenerated file named DefaultServerList.txt has been created in the same folder this app was launched from and has been preconfigured to read the services of this computer.  To access other computers and / or servers please add their names, seperated by commas, to the existing default .txt file, save it and then restart this app.  The server file list can be any .txt file in any location and can be changed vie the settings tab."

    Private Sub FormRemoteServicesControl_onLoad() Handles Me.Load
        'My.Settings.Reset()
        CheckFirstRun()
        PopulateLabels()
        PopulateServerList()
    End Sub

    Private Sub CheckFirstRun()
        If My.Settings.isFirstRun = True Then
            My.Settings.isFirstRun = False
            My.Settings.Save()
            FirstRun()
        End If
    End Sub

    Private Sub FirstRun()
        MsgBox("First Run!")
        CheckServersFileExists()
    End Sub

    Private Sub CheckServersFileExists()
        If My.Settings.serversFilePathAndName = "" Then
            Dim executingPath As String = Application.StartupPath
            Dim DefaultPathFile As StreamWriter = File.CreateText(executingPath & "\" & My.Settings.serversFileName)
            MsgBox(DefaultServersFileText)
            DefaultPathFile.WriteLine(My.Computer.Name)
            DefaultPathFile.Flush()
            DefaultPathFile.Close()
            My.Settings.serversFilePath = executingPath
            My.Settings.serversFilePathAndName = executingPath & "\" & My.Settings.serversFileName
            My.Settings.Save()
            MsgBox("DefaultServerFile created at: " & executingPath & "\" & My.Settings.serversFileName & " and loaded into the Main tab." & vbCrLf & vbCrLf & "To select a different server file click on the settings tab and select the Servers File button.")
        Else
            MsgBox("This is a first run but the default server file was not created or found! Please select a path file from the Settings tab.")
        End If
    End Sub

    Private Sub PopulateLabels()
        LabelserversFilePathAndName.Text = My.Settings.serversFilePathAndName
    End Sub

    Private Sub PopulateServerList()
        ComboBoxServerList.Items.Clear()
        Using MyReader As New Microsoft.VisualBasic.FileIO.TextFieldParser(My.Settings.serversFilePathAndName)
            MyReader.TextFieldType = FileIO.FieldType.Delimited
            MyReader.SetDelimiters(",")
            Dim currentRow As String()
            While Not MyReader.EndOfData
                Try
                    currentRow = MyReader.ReadFields()
                    Dim currentField As String
                    For Each currentField In currentRow
                        ComboBoxServerList.Items.Add(currentField)
                        'MsgBox(currentField)
                    Next
                Catch ex As Microsoft.VisualBasic.FileIO.MalformedLineException
                    MsgBox("Line " & ex.Message &
                    "is not valid and will be skipped.")
                End Try
            End While
        End Using
    End Sub

    Private Sub PopulateListViewServices()
        ListViewServices.ShowItemToolTips = True
        Try
            ListViewServices.Items.Clear()
            For Each service As ServiceController In ServiceController.GetServices(selectedServer)
                Dim serviceName As String = service.ServiceName
                Dim serviceDisplayName As String = service.DisplayName
                Dim serviceType As String = service.ServiceType.ToString()
                Dim status As String = service.Status.ToString()
                serviceNameItem = ListViewServices.Items.Add(serviceName)
                serviceNameItem.SubItems.Add(serviceDisplayName)
                serviceNameItem.SubItems.Add(status)
            Next
            LabelServerName.Text = selectedServer
        Catch exp As Exception
            MsgBox("Please select a server.")
        End Try
    End Sub

    Private Sub PopulateListViewLogServiceName()
        ListViewLogServiceName.ShowItemToolTips = True
        ListViewLogServiceName.Items.Clear()
        ViewApplicationsAndServicesLog()
    End Sub

    Private Sub PopulateDataGridViewServices()
        DataGridViewServices.Rows.Clear()
        Try
            For Each service As ServiceController In ServiceController.GetServices(selectedServer)
                Dim serviceName As String = service.ServiceName
                Dim serviceDisplayName As String = service.DisplayName
                Dim serviceType As String = service.ServiceType.ToString()
                Dim status As String = service.Status.ToString()
                DataGridViewServices.Rows.Add(New String() {serviceDisplayName, serviceType, status})
            Next
            LabelServerName.Text = selectedServer
        Catch exp As Exception
            MsgBox("Please select a server.")
        End Try
    End Sub

    Private Sub AddEvents(ByVal oEvEntry As System.Diagnostics.EventLogEntry)
        Dim logServiceOperationItem As New ListViewItem()

        With logServiceOperationItem
            .Text = oEvEntry.EntryType.ToString
            .SubItems.Add(oEvEntry.TimeGenerated) '.ToString)
            .SubItems.Add(oEvEntry.Source.ToString)
            .SubItems.Add(oEvEntry.Message.ToString)
        End With

        If oEvEntry.EntryType = EventLogEntryType.Error Then
            If oEvEntry.TimeGenerated.AddDays(My.Settings.previousDays) > dayAndTime Then
                ListViewLogInfo.Items.Add(logServiceOperationItem)
            End If
        End If
    End Sub

    Private Sub PopulateListViewLogInfo()
        ListViewLogInfo.ShowItemToolTips = True
        'Reads the application log. 
        Dim oEvent As New System.Diagnostics.EventLog(selectedService, selectedServer)
        Dim oEventEntry As System.Diagnostics.EventLogEntry
        'Loop through the available events information and call the AddEvents passing the oEventEntry object
        For Each oEventEntry In oEvent.Entries
            AddEvents(oEventEntry)
        Next
        oEvent.Dispose()
        oEventEntry.Dispose()
    End Sub

    Private Sub ViewApplicationsAndServicesLog()
        'from http://support.microsoft.com/kb/814564
        Dim remoteEventLogs() As EventLog
        remoteEventLogs = EventLog.GetEventLogs(selectedServer)
        Dim log As EventLog
        For Each log In remoteEventLogs
            logServiceNameItem = ListViewLogServiceName.Items.Add(log.Log)
        Next log
    End Sub

    Private Sub StartService()
        Try
            Dim myController As ServiceController
            myController = New ServiceController
            myController.MachineName = selectedServer
            myController.ServiceName = selectedService

            Try
                If myController.Status = ServiceControllerStatus.Running Then
                    MsgBox(selectedService & " is already started!")
                Else
                    myController.Start()
                    MsgBox(selectedService & " has been started!")
                End If
            Catch exp As Exception
                MsgBox("Could not start the " & selectedService & " service." & vbCrLf & "Contact your systems administrator to make sure the service can be initiated.")
            End Try

            PopulateListViewServices()

        Catch exp As Exception
            MsgBox("Please select a server.")
        End Try
    End Sub

    Private Sub StopService()
        Try
            Dim myController As ServiceController
            myController = New ServiceController
            myController.MachineName = selectedServer
            myController.ServiceName = selectedService

            Try
                If myController.Status = ServiceControllerStatus.Running Then
                    myController.Stop()
                    MsgBox(selectedService & " has been stopped!")
                Else
                    MsgBox(selectedService & " is already stopped!")
                End If

            Catch exp As Exception
                MsgBox("Could not stop the " & selectedService & " service." & vbCrLf & "Contact your systems administrator to make sure the service can be stopped.")
            End Try

            PopulateListViewServices()

        Catch exp As Exception
            MsgBox("Please select a server.")
        End Try
    End Sub

'    Private Sub RestartService()
'        Try
'            Dim myController As ServiceController
'            myController = New ServiceController
'            myController.MachineName = selectedServer
'            myController.ServiceName = selectedService

'            Try
'                If myController.Status = ServiceControllerStatus.Running Then
'                    myController.Stop()
'                    myController.WaitForStatus(ServiceControllerStatus.Stopped)
'                    myController.Start()
'                    MsgBox(selectedService & " has been restarted!")
'                Else
'                    myController.Start()
'                    MsgBox(selectedService & " was stopped, but it is now running!")
'                End If
'            Catch exp As Exception
'                MsgBox("Could not restart the " & selectedService & " service." & vbCrLf & "Contact your systems administrator to make sure the service can be initiated.")
'            End Try

'            PopulateListViewServices()

'        Catch exp As Exception
'            MsgBox("Please select a server.")
'        End Try
'    End Sub


    ''''CONTROLS''''''''''''''''''''''''
    Public Sub ListViewServices_SelectedIndexChanged(sender As Object, e As EventArgs)
        If ListViewServices.SelectedItems.Count > 0 Then
            selectedService = Me.ListViewServices.SelectedItems(0).Text
        End If
        LabelSelectedService.Text = selectedService
    End Sub

    Public Sub ComboBoxServerList_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBoxServerList.SelectedIndexChanged
        selectedServer = ComboBoxServerList.SelectedItem
        PopulateListViewServices()
        PopulateListViewLogServiceName()
        PopulateDataGridViewServices()
    End Sub


    ''''BUTTONS''''''''''''''''''''''''
    Private Sub ButtonStartService_Click(sender As Object, e As EventArgs)
        StartService()
    End Sub

    Private Sub ButtonStopService_Click(sender As Object, e As EventArgs)
        StopService()
    End Sub

'    Private Sub ButtonRestartService_Click(sender As Object, e As EventArgs)
'        RestartService()
'    End Sub

    Private Sub ButtonRefreshServices_Click(sender As Object, e As EventArgs)
        PopulateListViewServices()
    End Sub

    Private Sub ListViewLogServiceName_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListViewLogServiceName.SelectedIndexChanged
        If ListViewLogServiceName.SelectedItems.Count > 0 Then
            selectedService = Me.ListViewLogServiceName.SelectedItems(0).Text
            'MsgBox("selectedService: " & selectedService)
        End If
        LabelSelectedService.Text = selectedService
        PopulateListViewLogInfo()
    End Sub

    Private Sub ListViewLogInfo_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListViewLogInfo.SelectedIndexChanged
        Dim messageForm As New FormCustomMessageBox
        If messageForm.ShowDialog = DialogResult.Yes Then
            Clipboard.SetText(Me.ListViewLogInfo.SelectedItems(0).SubItems(3).Text)
        Else
        End If
    End Sub

    Private Sub DataGridViewServices_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles DataGridViewServices.CellContentClick
        If DataGridViewServices.RowCount > 0 Then
            selectedService = Me.DataGridViewServices.Item(0, e.RowIndex).Value.ToString
            Dim colName As String = DataGridViewServices.Columns(e.ColumnIndex).Name
            If colName = "DVGButtonStart" Then
                selectedService = Me.DataGridViewServices.Item(0, e.RowIndex).Value.ToString()
                StartService()
            End If
            If colName = "DVGButtonStop" Then
                selectedService = Me.DataGridViewServices.Item(0, e.RowIndex).Value.ToString()
                StopService()
            End If
        End If
        LabelSelectedService.Text = selectedService
    End Sub

    Private Sub ButtonServerSourceFile_Click(sender As Object, e As EventArgs) Handles ButtonServerSourceFile.Click
        'Selects and sets the My.Settings.pathsFilePathAndName- the .txt file that the server list is pulled from, then updates the folderData array and the Form with the new information
        If OpenFileDialog1.ShowDialog() = DialogResult.OK Then
            LabelserversFilePathAndName.Text = My.Settings.serversFilePathAndName
            My.Settings.serversFilePathAndName = OpenFileDialog1.FileName
        End If
        PopulateServerList()
        PopulateLabels()
        PopulateDataGridViewServices()
    End Sub

    Private Sub ButtonSaveConfig_Click(sender As Object, e As EventArgs) Handles ButtonSaveConfig.Click
        My.Settings.Save()
        MsgBox("Settings saved!")
    End Sub

End Class
