'FolderMonitorTool.exe written by Mark Newman on 1/23/2014
Imports System
...
Imports System.IO

Public Class FolderMonitor

    Dim HELP_FILE As String = "folder_monitor_tool_help.txt"
    Dim PATHS_FILE As String = "need to specify a path file" 'text file that contains the paths to monitor.  This file must contain only valid Windows path names, separated by a new line"
    Dim DefaultPathsFileText As String = "An autogenerated path file has been loaded.  Select a path file to monitor via the settings tab."
    Dim NUMBER_OF_FOLDERS As Integer '= GetFolderCount() number of folders to monitor
    Dim NUMBER_OF_COLUMNS As Integer = 2 'in the array as well as the listview
    Public folderData(0, NUMBER_OF_COLUMNS - 1) As Object 'Array to contain the folder path and file count (NUMBER_OF_FOLDERS - 1).  NOTES: folderData(x, 0) is the path / folderData(x, 1) is the FileCount
    Dim folderItem As ListViewItem 'Column1 = Paths / Column2 = file count

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    Public Sub LoadData() Handles Me.Load
        CheckFirstRun()
        Populate_folderData()
        PopulateFolderMonitor()
    End Sub


    Public Sub CheckFirstRun()
        If My.Settings.isFirstRun = True Then
            My.Settings.isFirstRun = False
            My.Settings.Save()
            FirstRun()
        End If
    End Sub


    Public Sub FirstRun()
        MsgBox("First Run!")
        My.Settings.refreshRate = 10
        My.Settings.fileCountThreshold = 10
        My.Settings.Save()
        CheckPathsFileExists()
    End Sub


    Public Sub CheckPathsFileExists()
        If My.Settings.pathsFilePathAndName = "null" Then
            Dim executingPath As String = Application.StartupPath
            Dim DefaultPathFile As StreamWriter = File.CreateText(executingPath & "\" & My.Settings.pathsFileName)
            DefaultPathFile.WriteLine(DefaultPathsFileText)
            DefaultPathFile.WriteLine(executingPath)
            DefaultPathFile.Flush()
            DefaultPathFile.Close()
            My.Settings.pathsFilePath = executingPath
            My.Settings.pathsFilePathAndName = executingPath & "\" & My.Settings.pathsFileName
            My.Settings.Save()
            MsgBox("DefaultPathFile created at: " & executingPath & "\" & My.Settings.pathsFileName & " and loaded into the Main tab." & vbCrLf & vbCrLf & "To select a different path file click on the settings tab and select the Path File button.")
        Else
            MsgBox("This is a first run but the default path file was not created or found! Please select a path file from the Settings tab.")
        End If
    End Sub


    Public Function GetFolderCount() As Integer
        'Reads the number of lines from My.Settings.pathsFilePathAndName- a .txt file specified under the settings tab and returns this value as number of folders that will be monitored.
        Dim buffer As String
        Dim folder_count As Integer = 0
        If System.IO.File.Exists(My.Settings.pathsFilePathAndName) = True Then
            Dim objReader As New System.IO.StreamReader(My.Settings.pathsFilePathAndName)
            Do While objReader.Peek() <> -1
                folder_count = folder_count + 1
                buffer = objReader.ReadLine() & vbNewLine
            Loop
            objReader.Close()
        Else
            MsgBox("Please specify a path file found under the settings tab...")
            StopAll()
        End If
        Return folder_count
    End Function


    Public Sub StartMonitoring()
        timerRefresh.Interval = My.Settings.refreshRate * 1000
        ListViewMain.Items.Clear()
        Populate_folderData()
        PopulateListViewMain()
        FileCountCheck()
        PopulateFolderMonitor()
    End Sub


    Public Sub Populate_folderData()
        'Resizes the multidimensional array called folderData based upon the number of folders to be monitored
        'Populates the folderData array with paths to the folders that will be monitored.
        'Populates the folderData array with a file count of its corresponding path
        Try
            NUMBER_OF_FOLDERS = GetFolderCount()
            ReDim folderData(UBound(folderData) + (NUMBER_OF_FOLDERS - 1), 1)
            If System.IO.File.Exists(My.Settings.pathsFilePathAndName) = True Then
                Dim objReader As New System.IO.StreamReader(My.Settings.pathsFilePathAndName) 'reads from the .txt file that contains the paths of the folders to monitor
                For x As Integer = 0 To (NUMBER_OF_FOLDERS - 1)
                    folderData(x, 0) = objReader.ReadLine() & vbNewLine
                    folderData(x, 1) = GetFileCount(folderData(x, 0))
                Next
                objReader.Close()
            Else
                StopAll()
            End If
        Catch ex As Exception
            StopAll()
        End Try
    End Sub


    Public Function GetFileCount(ByVal path As String) As Integer
        'Gets file count from a folder specified from the My.Settings.pathsFilePathAndName
        If My.Computer.FileSystem.DirectoryExists(path) = True Then
            Dim counter As System.Collections.ObjectModel.ReadOnlyCollection(Of String)
            counter = My.Computer.FileSystem.GetFiles(path)
            Return counter.Count
        Else
            Return -1 'Will specify in the Listview that the path was not found.
        End If
    End Function


    Public Sub PopulateListViewMain()
        'Populates the ListViewMain with the paths and filecount where Column1 = Paths / Column2 = file count
        For x As Integer = 0 To (NUMBER_OF_FOLDERS - 1)
            folderItem = ListViewMain.Items.Add(folderData(x, 0))
            If folderData(x, 1) = -1 Then
                folderItem.SubItems.Add("path not found")
            Else
                folderItem.SubItems.Add(folderData(x, 1))
            End If
        Next
    End Sub


    Public Sub FileCountCheck()
        'Checks the file count against the FILE_COUNT_THRESHOLD and alerts the user via a red listview row
        'If My.Settings.openThresholdFolders = true, opens the suspect folder in a new Windows Explorer window.  NOTE: the number of opened windows is not limited- it will keep opening a new window based upon the REFRESH_RATE
        For x As Integer = 0 To (NUMBER_OF_FOLDERS - 1)
            If folderData(x, 1) >= My.Settings.fileCountThreshold Then
                ListViewMain.Items(x).BackColor = Color.Red
                ListViewMain.Items(x).ForeColor = Color.White
                If My.Settings.openThresholdFolders = True Then
                    'If CheckIfRunning(x) = True Then
                    'nothing
                    'End If
                    'Else
                    Process.Start("explorer.exe", folderData(x, 0))
                End If
            Else
                ListViewMain.Items(x).BackColor = Color.White
            End If
        Next
    End Sub

    Public Sub OpenWindowCheck()
        'Dim p() As Process
        'p = Process.Start("explorer.exe", folderData(1, 0)).HandleCount > 1
        If Process.Equals("aaa.txt", "C:\a") > 0 Then
            MsgBox("yep")
        Else
            MsgBox("nope")
        End If
    End Sub


    Private Function CheckIfRunning(ByVal x)
        'folderData(x,0) has been verified as a string
        Dim folderPath = "aaa" 'folderData(x, 0)
        MsgBox(VarType(folderPath))
        Dim windows = New SHDocVw.ShellWindows()
        For Each window As SHDocVw.InternetExplorer In windows
            'If System.IO.Path.GetFileNameWithoutExtension(window.FullName).ToLower() = "explorer" And window.LocationURL.ToLower().Replace("/", "\").Contains(folderPath.ToLower()) Then
            If System.IO.Path.GetFileNameWithoutExtension(window.FullName) = "explorer" And window.LocationURL.Replace("/", "\").Replace("file:", "").Replace("%20", " ").Contains(folderPath) Then
                'MsgBox(window.LocationURL.Replace("/", "\").Replace("file:", ""))
                MsgBox("Should return true = " & window.LocationURL)
                Return True
            End If
            'MsgBox("not true = " & window.LocationURL)
        Next

        Return False
    End Function

    
    Public Sub PopulateFolderMonitor()
        'Populates the form with all relevant and updated information based upon the my.settings.refreshRate
        LabelCurrentRefreshRate.Text = "every " & (My.Settings.refreshRate) & " seconds"
        LabelCurrentFileThreshold.Text = My.Settings.fileCountThreshold
        LabelPathsFile.Text = My.Settings.pathsFilePathAndName
        TextBoxRefreshRate.Text = My.Settings.refreshRate
        TextBoxFileCountThreshold.Text = My.Settings.fileCountThreshold
        CheckBoxAlwaysOnTop.Checked = My.Settings.alwaysOnTop
        CheckBoxThreshold.Checked = My.Settings.openThresholdFolders
        LabelNumFolders.Text = GetFolderCount()
    End Sub


    Public Sub StopAll()
        LabelCurrentRefreshRate.Text = "stopped"
        LabelCurrentRefreshRate.ForeColor = Color.White
        LabelCurrentRefreshRate.BackColor = Color.Red
        timerRefresh.Stop()
    End Sub


    Private Sub timerRefresh_Tick(sender As Object, e As EventArgs) Handles timerRefresh.Tick
        'The below function is called based upon the my.settings.refreshRate
        StartMonitoring()
    End Sub


    Private Sub ListViewMain_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ListViewMain.SelectedIndexChanged
        'Opens a Windows Explorer window if the listView row is single-clicked
        Dim item_path As ListViewItem
        If ListViewMain.SelectedItems.Count > 0 Then
            item_path = ListViewMain.SelectedItems(0)
            Process.Start("explorer.exe", item_path.Text)
        End If
    End Sub


    Private Sub CheckBoxAlwaysOnTop_CheckedChanged(sender As Object, e As EventArgs) Handles CheckBoxAlwaysOnTop.CheckedChanged
        If CheckBoxAlwaysOnTop.Checked = True Then
            Me.TopMost = True
            My.Settings.alwaysOnTop = True
        Else
            Me.TopMost = False
            My.Settings.alwaysOnTop = False
        End If
    End Sub


    Private Sub CheckBoxThreshold_CheckedChanged(sender As Object, e As EventArgs) Handles CheckBoxThreshold.CheckedChanged
        If CheckBoxThreshold.Checked = True Then
            My.Settings.openThresholdFolders = True
        Else
            My.Settings.openThresholdFolders = False
        End If
    End Sub


    Private Sub TextBoxRefreshRate_ValueChanged(sender As Object, ByVal e As EventArgs) Handles TextBoxRefreshRate.TextChanged
        My.Settings.refreshRate = TextBoxRefreshRate.Text
    End Sub


    Private Sub TextBoxFileCountThreshold_ValueChanged(sender As Object, e As EventArgs) Handles TextBoxFileCountThreshold.TextChanged
        'Value is updated with the next timer tick
        My.Settings.fileCountThreshold = TextBoxFileCountThreshold.Text
    End Sub


    Private Sub ButtonStart_Click(sender As Object, e As EventArgs) Handles ButtonStart.Click
        'Begins the monitoring process
        LabelCurrentRefreshRate.ForeColor = Color.Black
        LabelCurrentRefreshRate.BackColor = Color.Transparent
        StartMonitoring()
        timerRefresh.Start()
    End Sub


    Private Sub ButtonStop_Click(sender As Object, e As EventArgs) Handles ButtonStop.Click
        'Stops the monitoring process, changes the refresh rate label to red as an alert
        StopAll()
    End Sub


    Private Sub ButtonPathSourceFile_Click(sender As Object, e As EventArgs) Handles ButtonPathSourceFile.Click
        'Selects and sets the My.Settings.pathsFilePathAndName- the .txt file that the paths to monitor are pulled from, then updates the folderData array and the Form with the new information
        If OpenFileDialog1.ShowDialog() = DialogResult.OK Then
            LabelPathsFile.Text = My.Settings.pathsFilePathAndName
            My.Settings.pathsFilePathAndName = OpenFileDialog1.FileName
            NUMBER_OF_FOLDERS = GetFolderCount()
        End If
        Populate_folderData()
        PopulateFolderMonitor()
    End Sub


    Private Sub ButtonSaveConfig_Click(sender As Object, e As EventArgs) Handles ButtonSaveConfig.Click
        My.Settings.Save()
        MsgBox("Settings saved!")
    End Sub


    Private Sub ButtonHelp_Click(sender As Object, e As EventArgs) Handles ButtonHelp.Click
        If System.IO.File.Exists(HELP_FILE) = True Then
            Process.Start(HELP_FILE)
        Else
            MsgBox("Sorry, cannot find the help file.  Look in the directory that contains the folder_monitor_tools.exe")
        End If
    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        'OpenWindowCheck()
        Dim x As Integer = 1
        MsgBox(CheckIfRunning(x))
    End Sub
End Class